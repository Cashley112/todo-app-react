{"version":3,"sources":["Todo.js","NewTodoForm.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["Todo","props","state","isEditing","task","handleRemove","bind","toggleForm","handleChange","handleUpdate","handleToggle","this","removeTask","id","setState","evt","preventDefault","updateTask","target","name","value","toggleTodo","className","onSubmit","type","onChange","completed","onClick","Component","NewTodoForm","handleSubmit","addTask","uuidv4","htmlFor","TodoList","todos","toggleCompletion","newTask","filter","t","updatedTask","updatedTasks","map","todo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ad0cfeb7.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './Todo.css';\n\nclass Todo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            task: this.props.task\n        }\n        this.handleRemove = this.handleRemove.bind(this);\n        this.toggleForm = this.toggleForm.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleUpdate = this.handleUpdate.bind(this);\n        this.handleToggle = this.handleToggle.bind(this);\n    }\n    handleRemove() {\n        this.props.removeTask(this.props.id);\n    }\n    toggleForm(){\n        this.setState({isEditing: !this.state.isEditing});\n    }\n    handleUpdate(evt) {\n        evt.preventDefault();\n        // take new task data and pass up to parent\n        this.props.updateTask(this.props.id, this.state.task);\n        this.setState({ isEditing: false });\n    }\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        })\n    }\n    handleToggle(evt) {\n        this.props.toggleTodo(this.props.id);\n    }\n    render () {\n        let result;\n        if(this.state.isEditing) {\n            result = (\n                <div className='Todo'>\n                    <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\n                        <input type=\"text\" value={this.state.task} name=\"task\" onChange={this.handleChange} />\n                        <button>Save</button>\n                    </form>\n                </div>\n            )\n        } else {\n            result = (\n                <div className='Todo'>\n                    <li className={this.props.completed ? 'Todo-task completed' : 'Todo-task'} onClick={this.handleToggle}>\n                        {this.props.task}\n                    </li>\n                    <div className='Todo-buttons'>\n                        <button onClick={this.handleRemove}><i className='fas fa-trash' /></button>\n                        <button onClick={this.toggleForm}><i className='fas fa-pen' /></button>\n                    </div>\n                </div>\n            )\n        }\n        return result;\n    }\n}\n\nexport default Todo;","import React, { Component } from 'react';\nimport './NewTodoForm.css';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass NewTodoForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = { \n            task: ''\n        }\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        })\n    }\n    handleSubmit(evt) {\n        evt.preventDefault();\n        this.props.addTask({ ...this.state, id: uuidv4(), completed: false });\n        this.setState({ task: '' });\n    }\n    render () {\n        return (\n            <form className='NewTodoForm' onSubmit={this.handleSubmit}>\n                <label htmlFor=\"task\">New Task: </label>\n                <input\n                    id=\"task\"\n                    name=\"task\"\n                    value={this.state.task}\n                    onChange={this.handleChange}\n                />\n                <button>Add to List</button>\n            </form>\n        )\n    }\n}\n\nexport default NewTodoForm;","import React, { Component } from 'react';\nimport Todo from './Todo';\nimport NewTodoForm from './NewTodoForm';\nimport './TodoList.css';\n\nclass TodoList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todos: []\n        }\n        this.addTask = this.addTask.bind(this);\n        this.removeTask = this.removeTask.bind(this);\n        this.updateTask = this.updateTask.bind(this);\n        this.toggleCompletion = this.toggleCompletion.bind(this);\n    }\n    addTask(newTask) {\n        this.setState({\n            todos: [...this.state.todos, newTask]\n        })\n    }\n    removeTask(id) {\n        this.setState({\n            todos: this.state.todos.filter(t => t.id !== id)\n        })\n    }\n    updateTask(id, updatedTask) {\n        const updatedTasks = this.state.todos.map(todo => {\n            if(todo.id === id) {\n                return {...todo, task: updatedTask}\n            }\n            return todo;\n        });\n        this.setState({ todos: updatedTasks })\n    }\n    toggleCompletion(id) {\n        const updatedTasks = this.state.todos.map(todo => {\n            if(todo.id === id) {\n                return {...todo, completed: !todo.completed};\n            }\n            return todo;\n        });\n        this.setState({ todos: updatedTasks });\n    }\n    render () {\n        const todos = this.state.todos.map(todo => {\n            return <Todo \n                    task={todo.task}\n                    key={todo.id} \n                    id={todo.id}\n                    completed={todo.completed}\n                    removeTask={this.removeTask}\n                    updateTask={this.updateTask}\n                    toggleTodo={this.toggleCompletion}\n                    />\n        })\n        return (\n            <div className=\"TodoList\">\n                <h1>\n                    React Todo List <span>What Have You Been Putting Off?</span>\n                </h1>\n                <ul>\n                    {todos}\n                </ul>\n                <NewTodoForm \n                    addTask={this.addTask}\n                />\n            </div>\n        )\n    }\n\n}\n\nexport default TodoList;","import './App.css';\nimport TodoList from './TodoList';\n\nfunction App() {\n  return (\n    <div>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}